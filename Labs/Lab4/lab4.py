#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LAB 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á DAB+ Station Scanner (‡πÇ‡∏à‡∏ó‡∏¢‡πå)
- ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ DAB+
- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™ 7" ‡∏î‡πâ‡∏ß‡∏¢ PyQt5
- ‡∏°‡∏µ GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥, ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
"""

import sys
import os
import json
import csv
import sqlite3
import logging
import subprocess
from datetime import datetime, timedelta
from collections import defaultdict

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton,
    QLabel, QTableWidget, QTableWidgetItem, QProgressBar, QComboBox, QSpinBox,
    QGroupBox, QSplitter, QTextEdit, QTabWidget, QTreeWidget, QTreeWidgetItem,
    QFileDialog, QMessageBox, QListWidget, QListWidgetItem, QHeaderView,
    QSlider, QCheckBox
)
from PyQt5.QtCore import QTimer, QThread, pyqtSignal, Qt, QDateTime
from PyQt5.QtGui import QFont, QPixmap, QIcon

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("Lab4")

# ---------- Database Manager ----------
class StationDatabase:
    def __init__(self, db_path="dab_stations.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ DAB+
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á stations: id, ensemble_id, ensemble_name, service_id, service_name,
        #                frequency_mhz, channel, bitrate, audio_mode, first_detected, last_detected, detection_count
        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì signal_history
        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô scan_history
        pass

    def add_station(self, station_data):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡∏°‡πà"""
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # TODO: return station_id ‡∏´‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        pass

    def get_all_stations(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # TODO: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° frequency_mhz ‡πÅ‡∏•‡∏∞ service_name
        return []

    def add_signal_record(self, station_id, signal_data):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
        # TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (signal_strength, snr, ber, status)
        pass

    def add_scan_record(self, scan_data):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        # TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (frequency_range, stations_found, scan_duration, notes)
        pass

# ---------- DAB+ Scanner Thread ----------
class DABScanner(QThread):
    station_found = pyqtSignal(dict)
    scan_progress = pyqtSignal(int, str)
    scan_completed = pyqtSignal(int)
    error_occurred = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.is_scanning = False
        self.frequency_ranges = {
            "Band III (174-240 MHz)": (174, 240),
            "L-Band (1452-1492 MHz)": (1452, 1492),
            "Full Range": (174, 1492)
        }
        self.current_range = "Band III (174-240 MHz)"
        self._stop_flag = False

    def set_frequency_range(self, range_name):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πÅ‡∏Å‡∏ô"""
        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ self.current_range
        pass

    def run(self):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ DAB+"""
        # TODO: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡πÅ‡∏Å‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        # TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å scan_frequency ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        # TODO: ‡∏™‡πà‡∏á signal station_found ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        # TODO: ‡∏™‡πà‡∏á signal scan_progress ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤
        # TODO: ‡∏™‡πà‡∏á signal scan_completed ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        pass

    def scan_frequency(self, frequency):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        # TODO: ‡πÉ‡∏ä‡πâ welle.io ‡∏´‡∏£‡∏∑‡∏≠ rtl_sdr ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á
        # TODO: ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        # TODO: return dict ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏´‡∏≤‡∏Å‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ None
        return None

    def freq_to_channel(self, freq_mhz):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á DAB+"""
        # TODO: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô channel name (‡πÄ‡∏ä‡πà‡∏ô 5A, 12B, L1 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô)
        return "Unknown"

    def stop_scan(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        # TODO: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á thread
        pass

# ---------- Real-time Signal Monitor ----------
class SignalMonitor(QThread):
    signal_updated = pyqtSignal(dict)

    def __init__(self):
        super().__init__()
        self.monitoring = False
        self.monitored_stations = []
        self._stop_flag = False

    def add_station(self, station_id, frequency):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        pass

    def remove_station(self, station_id):
        """‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        # TODO: ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        pass

    def run(self):
        """‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö real-time"""
        # TODO: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        # TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å measure_signal_quality ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        # TODO: ‡∏™‡πà‡∏á signal signal_updated ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        pass

    def measure_signal_quality(self, station):
        """‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
        # TODO: ‡πÉ‡∏ä‡πâ rtl_sdr ‡∏´‡∏£‡∏∑‡∏≠ welle.io ‡∏ß‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        # TODO: return dict ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (signal_strength, snr, ber, status)
        return None

    def stop_monitoring(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        # TODO: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á thread
        pass

# ---------- Station List Widget ----------
class StationListWidget(QWidget):
    station_selected = pyqtSignal(int)  # station_id

    def __init__(self):
        super().__init__()
        self.db = StationDatabase()
        self.setup_ui()
        # TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh_stations()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title = QLabel("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ DAB+")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        self.station_table = QTableWidget()
        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        # TODO: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

        layout.addWidget(self.station_table)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        button_layout = QHBoxLayout()
        self.refresh_btn = QPushButton("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
        self.monitor_btn = QPushButton("üëÅÔ∏è ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
        self.export_btn = QPushButton("üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV")

        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö touch interface

        button_layout.addWidget(self.refresh_btn)
        button_layout.addWidget(self.monitor_btn)
        button_layout.addWidget(self.export_btn)

        layout.addLayout(button_layout)

        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals

    def refresh_stations(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"""
        # TODO: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # TODO: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        pass

    def on_selection_changed(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"""
        # TODO: ‡∏™‡πà‡∏á signal station_selected ‡∏û‡∏£‡πâ‡∏≠‡∏° station_id
        pass

    def toggle_monitoring(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SignalMonitor
        pass

    def export_stations(self):
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏õ‡πá‡∏ô CSV"""
        # TODO: ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
        pass

# ---------- Signal Quality Chart Widget ----------
class SignalQualityChart(QWidget):
    def __init__(self):
        super().__init__()
        self.setup_matplotlib()
        self.setup_ui()
        self.signal_history = defaultdict(list)
        self.max_points = 100

    def setup_matplotlib(self):
        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á matplotlib figure ‡πÅ‡∏•‡∏∞ axes
        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏≤‡∏Ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Signal Strength, SNR, ‡πÅ‡∏•‡∏∞ BER
        pass

    def setup_ui(self):
        layout = QVBoxLayout(self)

        title = QLabel("‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö Real-time")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° matplotlib canvas

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        button_layout = QHBoxLayout()
        self.clear_btn = QPushButton("üóëÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏£‡∏≤‡∏ü")
        self.save_btn = QPushButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü")

        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö touch interface

        button_layout.addWidget(self.clear_btn)
        button_layout.addWidget(self.save_btn)

        layout.addLayout(button_layout)

        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals

    def update_signal_data(self, signal_data):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"""
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà
        # TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å update_charts()
        pass

    def update_charts(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü"""
        # TODO: ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü Signal Strength, SNR, ‡πÅ‡∏•‡∏∞ BER
        pass

    def clear_charts(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏£‡∏≤‡∏ü"""
        # TODO: ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
        pass

    def save_charts(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü"""
        # TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PNG
        pass

# ---------- Scanner Control Panel ----------
class ScannerControlPanel(QWidget):
    scan_requested = pyqtSignal(str)  # frequency_range

    def __init__(self):
        super().__init__()
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        scan_group = QGroupBox("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô")
        scan_layout = QVBoxLayout(scan_group)

        # ‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        freq_layout = QHBoxLayout()
        freq_layout.addWidget(QLabel("‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà:"))
        self.freq_combo = QComboBox()
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
        freq_layout.addWidget(self.freq_combo)
        scan_layout.addLayout(freq_layout)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_label = QLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πÅ‡∏Å‡∏ô")
        scan_layout.addWidget(self.progress_label)
        scan_layout.addWidget(self.progress_bar)

        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        button_layout = QHBoxLayout()
        self.start_scan_btn = QPushButton("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô")
        self.stop_scan_btn = QPushButton("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô")
        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö touch interface

        button_layout.addWidget(self.start_scan_btn)
        button_layout.addWidget(self.stop_scan_btn)
        scan_layout.addLayout(button_layout)

        layout.addWidget(scan_group)

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        stats_group = QGroupBox("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        stats_layout = QVBoxLayout(stats_group)

        self.total_scans_label = QLabel("‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 0")
        self.stations_found_label = QLabel("‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö: 0")
        self.last_scan_label = QLabel("‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: -")

        stats_layout.addWidget(self.total_scans_label)
        stats_layout.addWidget(self.stations_found_label)
        stats_layout.addWidget(self.last_scan_label)

        layout.addWidget(stats_group)

        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals

    def start_scan(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        # TODO: ‡∏™‡πà‡∏á signal scan_requested
        # TODO: ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        pass

    def stop_scan(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        # TODO: ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        pass

    def update_progress(self, percent, message):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤"""
        # TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bar ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        pass

    def scan_completed(self, stations_found):
        """‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        # TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ UI
        pass

# ---------- Main Window ----------
class Lab4MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = StationDatabase()
        self.scanner = DABScanner()
        self.signal_monitor = SignalMonitor()

        self.setup_ui()
        self.setup_touch_interface()
        self.setup_connections()

        self.setWindowTitle("LAB 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á DAB+ Station Scanner")
        self.resize(1200, 800)

    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏´‡∏•‡∏±‡∏Å"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QVBoxLayout(central_widget)

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        title_label = QLabel("LAB 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á DAB+ Station Scanner")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("""
            font-size: 20px; font-weight: bold; color: #2c3e50;
            padding: 15px; background-color: #ecf0f1; border-radius: 10px;
        """)
        main_layout.addWidget(title_label)

        # Tab widget
        self.tab_widget = QTabWidget()

        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab 1: Scanner (‡πÉ‡∏ä‡πâ ScannerControlPanel ‡πÅ‡∏•‡∏∞ StationListWidget)
        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab 2: Signal Monitoring (‡πÉ‡∏ä‡πâ SignalQualityChart)
        # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á Tab 3: History & Reports

        main_layout.addWidget(self.tab_widget)

        # Status bar
        self.status_label = QLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô")
        self.status_label.setStyleSheet("background-color: #d5f4e6; padding: 8px;")
        main_layout.addWidget(self.status_label)

    def setup_touch_interface(self):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"""
        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
        # TODO: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞ widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö touch
        pass

    def setup_connections(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡πÅ‡∏•‡∏∞ slots"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡∏Ç‡∏≠‡∏á scanner
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡∏Ç‡∏≠‡∏á signal monitor
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ signals ‡∏Ç‡∏≠‡∏á UI widgets
        pass

    def start_scan(self, frequency_range):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"""
        # TODO: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á DABScanner
        pass

    def on_station_found(self, station_data):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡∏°‡πà"""
        # TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        # TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        pass

    def on_scan_completed(self, stations_found):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        # TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        # TODO: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        pass

    def on_station_selected(self, station_id):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"""
        # TODO: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        pass

    def show_error(self, error_message):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        # TODO: ‡πÅ‡∏™‡∏î‡∏á error dialog ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        pass

    def closeEvent(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        # TODO: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á threads ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        pass

# ---------- Main Function ----------
def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á QApplication
    # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö touch interface
    # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    # TODO: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    pass

if __name__ == "__main__":
    print("LAB 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á DAB+ Station Scanner (‡πÇ‡∏à‡∏ó‡∏¢‡πå)")
    # TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å main()