#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LAB 0: Introduction to PyQt5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô PyQt5 GUI programming ‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
"""

import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                            QWidget, QPushButton, QLabel, QLineEdit, QTextEdit,
                            QSlider, QProgressBar, QMessageBox, QGroupBox,
                            QCheckBox, QRadioButton, QComboBox, QSpinBox)
from PyQt5.QtCore import QTimer, Qt, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap, QIcon

class BasicWidgetsDemo(QWidget):
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Widget ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # 1. ‡∏õ‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Label)
        self.title_label = QLabel("üéØ PyQt5 Widget Demo")
        self.title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #2c3e50;")
        self.title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.title_label)
        
        # 2. ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (LineEdit)
        input_layout = QHBoxLayout()
        input_layout.addWidget(QLabel("‡∏ä‡∏∑‡πà‡∏≠:"))
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...")
        input_layout.addWidget(self.name_input)
        layout.addLayout(input_layout)
        
        # 3. ‡∏õ‡∏∏‡πà‡∏° (Button)
        self.hello_btn = QPushButton("üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")
        self.hello_btn.clicked.connect(self.say_hello)  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° signal ‡∏Å‡∏±‡∏ö slot
        layout.addWidget(self.hello_btn)
        
        # 4. ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (TextEdit)
        self.output_text = QTextEdit()
        self.output_text.setMaximumHeight(100)
        layout.addWidget(self.output_text)
        
        # 5. Slider ‡πÅ‡∏•‡∏∞ Progress Bar
        slider_layout = QHBoxLayout()
        slider_layout.addWidget(QLabel("‡∏£‡∏∞‡∏î‡∏±‡∏ö:"))
        self.value_slider = QSlider(Qt.Horizontal)
        self.value_slider.setRange(0, 100)
        self.value_slider.setValue(50)
        self.value_slider.valueChanged.connect(self.update_progress)
        slider_layout.addWidget(self.value_slider)
        layout.addLayout(slider_layout)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(50)
        layout.addWidget(self.progress_bar)
        
    def say_hello(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"""
        # TODO: ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å self.name_input.text()
        name = ""  # <-- ‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        
        if name:
            message = f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {name}! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà PyQt5"
            # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô self.output_text
            pass  # <-- ‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        else:
            QMessageBox.information(self, "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
    
    def update_progress(self, value):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Progress Bar ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Slider ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        # TODO: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ progress bar ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö value
        pass  # <-- ‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

class SignalsAndSlotsDemo(QWidget):
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Signals ‡πÅ‡∏•‡∏∞ Slots"""
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á custom signal
    custom_signal = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        layout.addWidget(QLabel("üîå Signals & Slots Demo"))
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö signals
        self.signal_btn = QPushButton("‡∏™‡πà‡∏á Signal")
        layout.addWidget(self.signal_btn)
        
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.signal_output = QTextEdit()
        self.signal_output.setMaximumHeight(120)
        layout.addWidget(self.signal_output)
        
        # Timer demo
        self.timer_btn = QPushButton("‡πÄ‡∏£‡∏¥‡πà‡∏° Timer")
        layout.addWidget(self.timer_btn)
        
        self.timer_label = QLabel("Timer: 0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        layout.addWidget(self.timer_label)
        
        self.timer = QTimer()
        self.timer_count = 0
        
    def setup_connections(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° signals ‡∏Å‡∏±‡∏ö slots"""
        # Built-in signals
        self.signal_btn.clicked.connect(self.emit_custom_signal)
        
        # Custom signals
        self.custom_signal.connect(self.handle_custom_signal)
        
        # Timer
        self.timer_btn.clicked.connect(self.toggle_timer)
        self.timer.timeout.connect(self.update_timer)
        
    def emit_custom_signal(self):
        """‡∏™‡πà‡∏á custom signal"""
        message = f"Custom Signal ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ {QTimer().currentTime().toString()}"
        self.custom_signal.emit(message)
        
    def handle_custom_signal(self, message):
        """‡∏£‡∏±‡∏ö custom signal"""
        self.signal_output.append(f"üì° ‡∏£‡∏±‡∏ö Signal: {message}")
        
    def toggle_timer(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Timer"""
        if self.timer.isActive():
            self.timer.stop()
            self.timer_btn.setText("‡πÄ‡∏£‡∏¥‡πà‡∏° Timer")
            self.timer_count = 0
        else:
            # TODO: ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1000 ms (1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            pass  # <-- ‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            self.timer_btn.setText("‡∏´‡∏¢‡∏∏‡∏î Timer")
            
    def update_timer(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Timer"""
        self.timer_count += 1
        # TODO: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô timer_label ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á timer_count
        pass  # <-- ‡πÄ‡∏ï‡∏¥‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

class LayoutDemo(QWidget):
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á Layout"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        
    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        
        main_layout.addWidget(QLabel("üìê Layout Demo"))
        
        # Horizontal Layout
        h_group = QGroupBox("Horizontal Layout")
        h_layout = QHBoxLayout(h_group)
        h_layout.addWidget(QPushButton("‡∏ã‡πâ‡∏≤‡∏¢"))
        h_layout.addWidget(QPushButton("‡∏Å‡∏•‡∏≤‡∏á"))
        h_layout.addWidget(QPushButton("‡∏Ç‡∏ß‡∏≤"))
        main_layout.addWidget(h_group)
        
        # Vertical Layout
        v_group = QGroupBox("Vertical Layout")
        v_layout = QVBoxLayout(v_group)
        v_layout.addWidget(QPushButton("‡∏ö‡∏ô"))
        v_layout.addWidget(QPushButton("‡∏Å‡∏•‡∏≤‡∏á"))
        v_layout.addWidget(QPushButton("‡∏•‡πà‡∏≤‡∏á"))
        main_layout.addWidget(v_group)
        
        # Mixed Layout
        mixed_group = QGroupBox("Mixed Layout")
        mixed_main = QVBoxLayout(mixed_group)
        
        top_row = QHBoxLayout()
        top_row.addWidget(QPushButton("A"))
        top_row.addWidget(QPushButton("B"))
        mixed_main.addLayout(top_row)
        
        mixed_main.addWidget(QPushButton("C (‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)"))
        main_layout.addWidget(mixed_group)

class InputWidgetsDemo(QWidget):
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Input Widgets ‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        layout.addWidget(QLabel("‚å®Ô∏è Input Widgets Demo"))
        
        # Text Input
        text_group = QGroupBox("Text Input")
        text_layout = QVBoxLayout(text_group)
        
        self.line_edit = QLineEdit("Text input")
        text_layout.addWidget(self.line_edit)
        
        self.text_edit = QTextEdit("Multi-line text input")
        self.text_edit.setMaximumHeight(80)
        text_layout.addWidget(self.text_edit)
        layout.addWidget(text_group)
        
        # Checkboxes ‡πÅ‡∏•‡∏∞ Radio buttons
        choice_group = QGroupBox("Choices")
        choice_layout = QVBoxLayout(choice_group)
        
        self.checkbox1 = QCheckBox("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1")
        self.checkbox2 = QCheckBox("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2")
        choice_layout.addWidget(self.checkbox1)
        choice_layout.addWidget(self.checkbox2)
        
        self.radio1 = QRadioButton("Radio A")
        self.radio2 = QRadioButton("Radio B")
        self.radio1.setChecked(True)
        choice_layout.addWidget(self.radio1)
        choice_layout.addWidget(self.radio2)
        layout.addWidget(choice_group)
        
        # ComboBox ‡πÅ‡∏•‡∏∞ SpinBox
        select_group = QGroupBox("Selection")
        select_layout = QVBoxLayout(select_group)
        
        self.combo = QComboBox()
        self.combo.addItems(["‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1", "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2", "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3"])
        select_layout.addWidget(self.combo)
        
        self.spinbox = QSpinBox()
        self.spinbox.setRange(0, 100)
        self.spinbox.setValue(25)
        select_layout.addWidget(self.spinbox)
        layout.addWidget(select_group)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤
        self.show_values_btn = QPushButton("üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        layout.addWidget(self.show_values_btn)
        
        self.result_text = QTextEdit()
        self.result_text.setMaximumHeight(100)
        layout.addWidget(self.result_text)
        
    def setup_connections(self):
        self.show_values_btn.clicked.connect(self.show_all_values)
        
    def show_all_values(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input widgets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        values = []
        values.append(f"Line Edit: {self.line_edit.text()}")
        values.append(f"Text Edit: {self.text_edit.toPlainText()[:20]}...")
        values.append(f"Checkbox 1: {self.checkbox1.isChecked()}")
        values.append(f"Checkbox 2: {self.checkbox2.isChecked()}")
        values.append(f"Radio A: {self.radio1.isChecked()}")
        values.append(f"ComboBox: {self.combo.currentText()}")
        values.append(f"SpinBox: {self.spinbox.value()}")
        
        self.result_text.clear()
        for value in values:
            self.result_text.append(value)

class TouchFriendlyDemo(QWidget):
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ UI ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.apply_touch_styles()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        
        # Title
        title = QLabel("üì± Touch-Friendly UI Demo")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™
        button_layout = QHBoxLayout()
        self.big_btn1 = QPushButton("üéØ ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà 1")
        self.big_btn2 = QPushButton("üîß ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà 2")
        self.big_btn3 = QPushButton("üìä ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà 3")
        
        button_layout.addWidget(self.big_btn1)
        button_layout.addWidget(self.big_btn2)
        button_layout.addWidget(self.big_btn3)
        layout.addLayout(button_layout)
        
        # Slider ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡πâ‡∏ß
        slider_layout = QVBoxLayout()
        slider_layout.addWidget(QLabel("üéöÔ∏è Big Slider for Touch"))
        self.big_slider = QSlider(Qt.Horizontal)
        self.big_slider.setRange(0, 100)
        self.big_slider.setValue(50)
        slider_layout.addWidget(self.big_slider)
        
        self.slider_value_label = QLabel("‡∏Ñ‡πà‡∏≤: 50")
        slider_layout.addWidget(self.slider_value_label)
        layout.addLayout(slider_layout)
        
        # ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°
        self.big_slider.valueChanged.connect(
            lambda v: self.slider_value_label.setText(f"‡∏Ñ‡πà‡∏≤: {v}")
        )
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö touch feedback
        self.feedback_btn = QPushButton("üéâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Touch Feedback")
        self.feedback_btn.clicked.connect(self.show_touch_feedback)
        layout.addWidget(self.feedback_btn)
        
    def apply_touch_styles(self):
        """‡πÉ‡∏ä‡πâ styles ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"""
        
        # Style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà
        big_button_style = """
        QPushButton {
            border: 2px solid #3498db;
            border-radius: 8px;
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #5dade2, stop:1 #3498db);
            color: white;
            font-weight: bold;
            font-size: 14px;
            padding: 15px;
            min-height: 50px;
            min-width: 120px;
        }
        QPushButton:pressed {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #3498db, stop:1 #2980b9);
            border: 2px solid #2980b9;
        }
        QPushButton:hover {
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #85c1e9, stop:1 #5dade2);
        }
        """
        
        for btn in [self.big_btn1, self.big_btn2, self.big_btn3, self.feedback_btn]:
            btn.setStyleSheet(big_button_style)
            
        # Style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö slider
        self.big_slider.setStyleSheet("""
        QSlider::groove:horizontal {
            border: 1px solid #bbb;
            background: white;
            height: 20px;
            border-radius: 10px;
        }
        QSlider::handle:horizontal {
            background: #3498db;
            border: 2px solid #2980b9;
            width: 30px;
            height: 30px;
            margin: -8px 0;
            border-radius: 15px;
        }
        QSlider::handle:horizontal:pressed {
            background: #2980b9;
        }
        """)
        
    def show_touch_feedback(self):
        """‡πÅ‡∏™‡∏î‡∏á feedback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"""
        QMessageBox.information(
            self, 
            "Touch Feedback", 
            "üéâ ‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á feedback\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"
        )

class Lab0MainWindow(QMainWindow):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Lab 0"""
    
    def __init__(self):
        super().__init__()
        self.current_demo = 0
        self.demos = []
        self.setup_ui()
        self.setup_demos()
        
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏´‡∏•‡∏±‡∏Å"""
        self.setWindowTitle("LAB 0: PyQt5 Introduction")
        self.setGeometry(100, 100, 900, 700)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        
        # Header
        header = QLabel("üéì LAB 0: PyQt5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        header.setStyleSheet("""
            font-size: 20px;
            font-weight: bold;
            color: #2c3e50;
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0px;
        """)
        header.setAlignment(Qt.AlignCenter)
        layout.addWidget(header)
        
        # Navigation
        nav_layout = QHBoxLayout()
        self.prev_btn = QPushButton("‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        self.next_btn = QPushButton("‚û°Ô∏è ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        self.demo_label = QLabel("Demo 1/5")
        self.demo_label.setAlignment(Qt.AlignCenter)
        
        nav_layout.addWidget(self.prev_btn)
        nav_layout.addWidget(self.demo_label)
        nav_layout.addWidget(self.next_btn)
        layout.addLayout(nav_layout)
        
        # Demo area
        self.demo_area = QWidget()
        layout.addWidget(self.demo_area, 1)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° navigation
        self.prev_btn.clicked.connect(self.prev_demo)
        self.next_btn.clicked.connect(self.next_demo)
        
        # Status
        self.status_label = QLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ PyQt5! ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π demos")
        self.status_label.setStyleSheet("padding: 8px; background-color: #d5f4e6; border-radius: 5px;")
        layout.addWidget(self.status_label)
        
    def setup_demos(self):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° demos ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.demos = [
            ("üß© Basic Widgets", BasicWidgetsDemo),
            ("üîå Signals & Slots", SignalsAndSlotsDemo),
            ("üìê Layouts", LayoutDemo),
            ("‚å®Ô∏è Input Widgets", InputWidgetsDemo),
            ("üì± Touch-Friendly UI", TouchFriendlyDemo)
        ]
        
        self.show_current_demo()
        
    def show_current_demo(self):
        """‡πÅ‡∏™‡∏î‡∏á demo ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå demo area
        if self.demo_area.layout():
            for i in reversed(range(self.demo_area.layout().count())):
                self.demo_area.layout().itemAt(i).widget().setParent(None)
        else:
            layout = QVBoxLayout(self.demo_area)
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á demo ‡πÉ‡∏´‡∏°‡πà
        demo_name, demo_class = self.demos[self.current_demo]
        demo_widget = demo_class()
        
        self.demo_area.layout().addWidget(demo_widget)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        self.demo_label.setText(f"{demo_name} ({self.current_demo + 1}/{len(self.demos)})")
        self.prev_btn.setEnabled(self.current_demo > 0)
        self.next_btn.setEnabled(self.current_demo < len(self.demos) - 1)
        
        self.status_label.setText(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á: {demo_name}")
        
    def prev_demo(self):
        """‡πÑ‡∏õ‡∏¢‡∏±‡∏á demo ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"""
        if self.current_demo > 0:
            self.current_demo -= 1
            self.show_current_demo()
            
    def next_demo(self):
        """‡πÑ‡∏õ‡∏¢‡∏±‡∏á demo ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        if self.current_demo < len(self.demos) - 1:
            self.current_demo += 1
            self.show_current_demo()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    app = QApplication(sys.argv)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™
    font = QFont()
    font.setPointSize(11)
    font.setFamily("DejaVu Sans")
    app.setFont(font)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    window = Lab0MainWindow()
    window.show()
    
    return app.exec_()

if __name__ == "__main__":
    print("üéì LAB 0: PyQt5 Introduction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    print("üìö ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô PyQt5 ‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!")
    sys.exit(main())