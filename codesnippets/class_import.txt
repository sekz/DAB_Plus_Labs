import socket, struct, numpy as np

class RTLTCPClient:
    def __init__(self, host, port):
        self.addr = (host, port)
        self.sock = None

    def connect(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect(self.addr)

    def _cmd(self, code, param):
        self.sock.sendall(bytes([code]) + struct.pack('>I', int(param)))

    def set_sample_rate(self, hz):   self._cmd(0x02, hz)
    def set_frequency(self, hz):     self._cmd(0x01, hz)
    def set_gain_mode(self, manual): self._cmd(0x03, 1 if manual else 0)

    def read_samples(self, n):
        need = n * 2
        buf = bytearray()
        while len(buf) < need:
            chunk = self.sock.recv(need - len(buf))
            if not chunk: break
            buf += chunk
        x = np.frombuffer(buf, np.uint8).astype(np.float32)
        x = (x - 127.5) / 127.5
        return x[0::2] + 1j * x[1::2]

    def close(self):
        if self.sock: self.sock.close()
