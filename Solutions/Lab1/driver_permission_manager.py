#!/usr/bin/env python3
"""
Driver and Permission Management Implementation
Solution for Lab 1 Trap 1.2: Driver Permission Investigation
"""

import subprocess
import os
import grp
import pwd
import stat
from pathlib import Path
from typing import Dict, List, Optional

class DriverPermissionManager:
    """Manage RTL-SDR driver blacklisting and permissions"""

    def __init__(self):
        self.blacklist_file = '/etc/modprobe.d/blacklist-rtl.conf'
        self.udev_rules_file = '/etc/udev/rules.d/20-rtlsdr.rules'
        self.required_groups = ['plugdev', 'dialout']
        self.dvb_modules = [
            'dvb_usb_rtl28xxu',
            'rtl2832',
            'rtl2830'
        ]

    def check_blacklist_status(self) -> Dict:
        """Check current blacklist configuration"""
        status = {
            'blacklist_exists': False,
            'blacklisted_modules': [],
            'active_modules': [],
            'recommendations': []
        }

        # Check if blacklist file exists
        if os.path.exists(self.blacklist_file):
            status['blacklist_exists'] = True

            try:
                with open(self.blacklist_file, 'r') as f:
                    content = f.read()

                for module in self.dvb_modules:
                    if f'blacklist {module}' in content:
                        status['blacklisted_modules'].append(module)

            except PermissionError:
                status['recommendations'].append(
                    f"Cannot read {self.blacklist_file} - need sudo access"
                )

        # Check which modules are currently loaded
        try:
            result = subprocess.run(['lsmod'], capture_output=True, text=True)
            loaded_modules = result.stdout

            for module in self.dvb_modules:
                if module in loaded_modules:
                    status['active_modules'].append(module)

        except Exception as e:
            status['recommendations'].append(f"Cannot check loaded modules: {e}")

        # Generate recommendations
        if not status['blacklist_exists']:
            status['recommendations'].append(
                "Create blacklist file to prevent DVB driver conflicts"
            )

        for module in self.dvb_modules:
            if module not in status['blacklisted_modules']:
                status['recommendations'].append(
                    f"Add 'blacklist {module}' to {self.blacklist_file}"
                )

        if status['active_modules']:
            status['recommendations'].append(
                f"Unload active DVB modules: {', '.join(status['active_modules'])}"
            )

        return status

    def create_blacklist_file(self) -> str:
        """Generate blacklist file content"""
        content = f"""# RTL-SDR Blacklist Configuration
# Prevents DVB drivers from claiming RTL-SDR devices
# Generated by RTL-SDR Lab Exercise

"""

        for module in self.dvb_modules:
            content += f"blacklist {module}\n"

        content += f"""
# After creating this file, run:
# sudo depmod -a
# sudo update-initramfs -u
"""

        return content

    def check_user_permissions(self, username: Optional[str] = None) -> Dict:
        """Check user permissions for RTL-SDR access"""
        if username is None:
            username = pwd.getpwuid(os.getuid()).pw_name

        status = {
            'username': username,
            'user_groups': [],
            'missing_groups': [],
            'has_rtlsdr_access': False,
            'recommendations': []
        }

        try:
            # Get user's groups
            user_groups = [g.gr_name for g in grp.getgrall() if username in g.gr_mem]

            # Add primary group
            user_info = pwd.getpwnam(username)
            primary_group = grp.getgrgid(user_info.pw_gid).gr_name
            if primary_group not in user_groups:
                user_groups.append(primary_group)

            status['user_groups'] = user_groups

            # Check required groups
            for group in self.required_groups:
                if group not in user_groups:
                    status['missing_groups'].append(group)

            # Determine access status
            status['has_rtlsdr_access'] = len(status['missing_groups']) == 0

            # Generate recommendations
            if status['missing_groups']:
                for group in status['missing_groups']:
                    status['recommendations'].append(
                        f"Add user to {group} group: sudo usermod -a -G {group} {username}"
                    )

                status['recommendations'].append(
                    "Log out and log back in for group changes to take effect"
                )

        except Exception as e:
            status['recommendations'].append(f"Permission check failed: {e}")

        return status

    def create_udev_rules(self) -> str:
        """Generate udev rules for RTL-SDR devices"""
        rules = f"""# RTL-SDR udev rules
# Allows users in plugdev group to access RTL-SDR devices
# Place this file in {self.udev_rules_file}

# RTL2838 DVB-T
SUBSYSTEM=="usb", ATTRS{{idVendor}}=="0bda", ATTRS{{idProduct}}=="2838", GROUP="plugdev", MODE="0666", SYMLINK+="rtl_sdr"

# RTL2832U DVB-T
SUBSYSTEM=="usb", ATTRS{{idVendor}}=="0bda", ATTRS{{idProduct}}=="2832", GROUP="plugdev", MODE="0666", SYMLINK+="rtl_sdr"

# RTL2834 DVB-T
SUBSYSTEM=="usb", ATTRS{{idVendor}}=="0bda", ATTRS{{idProduct}}=="2834", GROUP="plugdev", MODE="0666", SYMLINK+="rtl_sdr"

# After installing these rules, run:
# sudo udevadm control --reload-rules
# sudo udevadm trigger
"""

        return rules

    def check_udev_rules(self) -> Dict:
        """Check current udev rules configuration"""
        status = {
            'rules_exist': False,
            'rules_content': '',
            'device_permissions': [],
            'recommendations': []
        }

        # Check if rules file exists
        if os.path.exists(self.udev_rules_file):
            status['rules_exist'] = True

            try:
                with open(self.udev_rules_file, 'r') as f:
                    status['rules_content'] = f.read()
            except PermissionError:
                status['recommendations'].append(
                    f"Cannot read {self.udev_rules_file} - need sudo access"
                )

        else:
            status['recommendations'].append(
                f"Create udev rules file: {self.udev_rules_file}"
            )

        # Check device permissions
        import glob
        rtl_devices = glob.glob('/dev/rtl_sdr*') + glob.glob('/dev/swradio*')

        for device in rtl_devices:
            try:
                file_stat = os.stat(device)
                mode = stat.filemode(file_stat.st_mode)
                owner = pwd.getpwuid(file_stat.st_uid).pw_name
                group = grp.getgrgid(file_stat.st_gid).gr_name

                status['device_permissions'].append({
                    'device': device,
                    'permissions': mode,
                    'owner': owner,
                    'group': group
                })

            except Exception as e:
                status['device_permissions'].append({
                    'device': device,
                    'error': str(e)
                })

        return status

    def perform_module_management(self, action: str, module: str = None) -> Dict:
        """Manage kernel modules (requires sudo)"""
        result = {
            'action': action,
            'success': False,
            'output': '',
            'error': ''
        }

        try:
            if action == 'unload_all':
                # Unload all DVB modules
                for mod in self.dvb_modules:
                    try:
                        subprocess.run(['sudo', 'modprobe', '-r', mod],
                                     capture_output=True, text=True, check=True)
                        result['output'] += f"Unloaded {mod}\n"
                    except subprocess.CalledProcessError:
                        pass  # Module might not be loaded

            elif action == 'unload' and module:
                subprocess.run(['sudo', 'modprobe', '-r', module],
                             capture_output=True, text=True, check=True)
                result['output'] = f"Unloaded {module}"

            elif action == 'load' and module:
                subprocess.run(['sudo', 'modprobe', module],
                             capture_output=True, text=True, check=True)
                result['output'] = f"Loaded {module}"

            result['success'] = True

        except subprocess.CalledProcessError as e:
            result['error'] = e.stderr or str(e)
        except Exception as e:
            result['error'] = str(e)

        return result

    def get_comprehensive_status(self) -> Dict:
        """Get comprehensive status of RTL-SDR configuration"""
        return {
            'blacklist_status': self.check_blacklist_status(),
            'user_permissions': self.check_user_permissions(),
            'udev_rules': self.check_udev_rules(),
            'configuration_files': {
                'blacklist': self.create_blacklist_file(),
                'udev_rules': self.create_udev_rules()
            }
        }

def main():
    """Main function for standalone testing"""
    manager = DriverPermissionManager()

    print("RTL-SDR Driver and Permission Status")
    print("=" * 50)

    # Get comprehensive status
    status = manager.get_comprehensive_status()

    # Display blacklist status
    print("\n1. Blacklist Status:")
    blacklist = status['blacklist_status']
    print(f"   Blacklist file exists: {blacklist['blacklist_exists']}")
    print(f"   Blacklisted modules: {blacklist['blacklisted_modules']}")
    print(f"   Active DVB modules: {blacklist['active_modules']}")

    if blacklist['recommendations']:
        print("   Recommendations:")
        for rec in blacklist['recommendations']:
            print(f"     • {rec}")

    # Display user permissions
    print("\n2. User Permissions:")
    perms = status['user_permissions']
    print(f"   Username: {perms['username']}")
    print(f"   User groups: {', '.join(perms['user_groups'])}")
    print(f"   Missing groups: {perms['missing_groups']}")
    print(f"   Has RTL-SDR access: {perms['has_rtlsdr_access']}")

    if perms['recommendations']:
        print("   Recommendations:")
        for rec in perms['recommendations']:
            print(f"     • {rec}")

    # Display udev rules
    print("\n3. Udev Rules:")
    udev = status['udev_rules']
    print(f"   Rules file exists: {udev['rules_exist']}")

    if udev['device_permissions']:
        print("   Device permissions:")
        for dev in udev['device_permissions']:
            if 'error' in dev:
                print(f"     {dev['device']}: ERROR - {dev['error']}")
            else:
                print(f"     {dev['device']}: {dev['permissions']} {dev['owner']}:{dev['group']}")

    if udev['recommendations']:
        print("   Recommendations:")
        for rec in udev['recommendations']:
            print(f"     • {rec}")

    # Show configuration files
    print("\n4. Configuration Files:")
    print("   Blacklist file content:")
    print("   " + "─" * 40)
    for line in status['configuration_files']['blacklist'].split('\n'):
        print(f"   {line}")

    print("\n   Udev rules content:")
    print("   " + "─" * 40)
    for line in status['configuration_files']['udev_rules'].split('\n')[:10]:
        print(f"   {line}")

if __name__ == '__main__':
    main()