#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LAB 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö RTL-SDR - ‡πÄ‡∏â‡∏•‡∏¢‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á RTL-SDR dongle ‡∏ö‡∏ô Raspberry Pi
"""

import sys
import subprocess
import time
import os
import logging
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout,
                            QWidget, QPushButton, QTextEdit, QLabel, QProgressBar,
                            QMessageBox, QFileDialog)
from PyQt5.QtCore import QTimer, QThread, pyqtSignal, Qt
from PyQt5.QtGui import QFont, QPixmap

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RTLSDRTestThread(QThread):
    """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö RTL-SDR"""
    
    test_result = pyqtSignal(str)
    progress_update = pyqtSignal(int)
    error_occurred = pyqtSignal(str)
    test_completed = pyqtSignal(bool)
    
    def __init__(self):
        super().__init__()
        self.test_results = []
        self.current_test = ""
        
    def run(self):
        """‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á thread - ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.test_result.emit("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö RTL-SDR ===\n")
            self.progress_update.emit(0)
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö USB device
            self.current_test = "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ USB"
            self.test_result.emit(f"üîç {self.current_test}...")
            success, message = self.check_usb_device()
            self.test_result.emit(f"{'‚úÖ' if success else '‚ùå'} {message}\n")
            self.test_results.append(f"{self.current_test}: {'PASS' if success else 'FAIL'}")
            self.progress_update.emit(25)
            
            if not success:
                self.error_occurred.emit("RTL-SDR device ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
                return
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå
            self.current_test = "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå"
            self.test_result.emit(f"üîç {self.current_test}...")
            success, message = self.check_drivers()
            self.test_result.emit(f"{'‚úÖ' if success else '‚ö†Ô∏è'} {message}\n")
            self.test_results.append(f"{self.current_test}: {'PASS' if success else 'WARNING'}")
            self.progress_update.emit(50)
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            self.current_test = "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"
            self.test_result.emit(f"üîç {self.current_test}...")
            success, message = self.test_rtlsdr_functionality()
            self.test_result.emit(f"{'‚úÖ' if success else '‚ùå'} {message}\n")
            self.test_results.append(f"{self.current_test}: {'PASS' if success else 'FAIL'}")
            self.progress_update.emit(75)
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            self.current_test = "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
            self.test_result.emit(f"üîç {self.current_test}...")
            success, message = self.get_device_info()
            self.test_result.emit(f"{'‚úÖ' if success else '‚ùå'} {message}\n")
            self.test_results.append(f"{self.current_test}: {'PASS' if success else 'FAIL'}")
            self.progress_update.emit(100)
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            passed = sum(1 for result in self.test_results if 'PASS' in result)
            total = len(self.test_results)
            
            self.test_result.emit("=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===")
            self.test_result.emit(f"‡∏ú‡πà‡∏≤‡∏ô: {passed}/{total} ‡∏Ç‡πâ‡∏≠")
            
            if passed == total:
                self.test_result.emit("üéâ RTL-SDR ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
                self.test_completed.emit(True)
            else:
                self.test_result.emit("‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏Ç‡πâ‡∏≠ - ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
                self.test_completed.emit(False)
                
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {str(e)}")
            self.error_occurred.emit(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    def check_usb_device(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ USB ‡∏Ç‡∏≠‡∏á RTL-SDR"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ lsusb
            result = subprocess.run(['lsusb'], capture_output=True, text=True, timeout=5)
            
            if result.returncode != 0:
                return False, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô lsusb ‡πÑ‡∏î‡πâ"
            
            usb_output = result.stdout.lower()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ RTL-SDR device IDs ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
            known_devices = [
                ('0bda:2832', 'RTL2832U DVB-T'),
                ('0bda:2838', 'RTL2838 DVB-T'),
                ('1d50:604b', 'RTL-SDR Blog V3'),
                ('1209:2832', 'Generic RTL2832U')
            ]
            
            found_device = None
            for device_id, device_name in known_devices:
                if device_id in usb_output:
                    found_device = (device_id, device_name)
                    break
            
            if found_device:
                return True, f"‡∏û‡∏ö RTL-SDR device: {found_device[1]} (ID: {found_device[0]})"
            else:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                if 'rtl' in usb_output or 'realtek' in usb_output:
                    return True, "‡∏û‡∏ö RTL-SDR device (‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)"
                else:
                    return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö RTL-SDR device - ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ö USB"
                    
        except subprocess.TimeoutExpired:
            return False, "Timeout: lsusb ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
        except Exception as e:
            return False, f"Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö USB: {str(e)}"
    
    def check_drivers(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
        try:
            issues = []
            warnings = []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà
            result = subprocess.run(['lsmod'], capture_output=True, text=True)
            loaded_modules = result.stdout.lower()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á
            conflicting_drivers = ['dvb_usb_rtl28xxu', 'rtl2832', 'rtl2830', 'dvb_usb_rtl2832u']
            loaded_conflicts = [driver for driver in conflicting_drivers if driver in loaded_modules]
            
            if loaded_conflicts:
                warnings.append(f"‡∏û‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á: {', '.join(loaded_conflicts)}")
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö blacklist
            blacklist_files = ['/etc/modprobe.d/blacklist-rtl.conf', '/etc/modprobe.d/rtl-sdr-blacklist.conf']
            blacklist_exists = any(os.path.exists(f) for f in blacklist_files)
            
            if not blacklist_exists and loaded_conflicts:
                issues.append("‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå blacklist ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå DVB-T")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö udev rules
            udev_paths = ['/etc/udev/rules.d/20-rtlsdr.rules', '/lib/udev/rules.d/20-rtlsdr.rules']
            udev_exists = any(os.path.exists(f) for f in udev_paths)
            
            if not udev_exists:
                issues.append("‡πÑ‡∏°‡πà‡∏û‡∏ö udev rules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTL-SDR")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö group membership
            try:
                result = subprocess.run(['groups'], capture_output=True, text=True)
                groups = result.stdout.lower()
                if 'plugdev' not in groups:
                    issues.append("User ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô group plugdev")
            except:
                pass
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            message = ""
            if not issues and not warnings:
                message = "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                return True, message
            
            if warnings:
                message += "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: " + "; ".join(warnings) + "\n"
            if issues:
                message += "‡∏õ‡∏±‡∏ç‡∏´‡∏≤: " + "; ".join(issues)
                return False, message
            else:
                return True, message
                
        except Exception as e:
            return False, f"Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå: {str(e)}"
    
    def test_rtlsdr_functionality(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á RTL-SDR ‡∏î‡πâ‡∏ß‡∏¢ rtl_test"""
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ rtl_test -t (test mode)
            result = subprocess.run(['rtl_test', '-t'], 
                                  capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                output_lines = result.stdout.split('\n')
                success_indicators = ['found', 'success', 'supported', 'ok']
                error_indicators = ['error', 'failed', 'not found', 'permission denied']
                
                has_success = any(any(indicator in line.lower() for indicator in success_indicators) 
                                for line in output_lines)
                has_error = any(any(indicator in line.lower() for indicator in error_indicators) 
                              for line in output_lines)
                
                if has_success and not has_error:
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å output
                    tuner_info = ""
                    for line in output_lines:
                        if 'tuner' in line.lower() or 'gain' in line.lower():
                            tuner_info += line.strip() + "\n"
                    
                    message = f"RTL-SDR ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥\n"
                    if tuner_info:
                        message += f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tuner:\n{tuner_info}"
                    return True, message
                else:
                    return False, f"RTL-SDR ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:\n{result.stdout[:300]}"
            else:
                return False, f"rtl_test failed (exit code: {result.returncode}):\n{result.stderr[:300]}"
                
        except subprocess.TimeoutExpired:
            return False, "Timeout: rtl_test ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (>15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"
        except FileNotFoundError:
            return False, "‡πÑ‡∏°‡πà‡∏û‡∏ö rtl_test command - ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á rtl-sdr packages"
        except Exception as e:
            return False, f"Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö RTL-SDR: {str(e)}"
    
    def get_device_info(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á RTL-SDR device"""
        try:
            info_dict = {}
            
            # ‡πÉ‡∏ä‡πâ rtl_eeprom ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å EEPROM
            try:
                result = subprocess.run(['rtl_eeprom'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å eeprom output
                    for line in result.stdout.split('\n'):
                        if ':' in line and any(key in line.lower() 
                                             for key in ['vendor', 'product', 'serial', 'tuner']):
                            parts = line.split(':', 1)
                            if len(parts) == 2:
                                key = parts[0].strip()
                                value = parts[1].strip()
                                info_dict[key] = value
            except:
                pass
            
            # ‡πÉ‡∏ä‡πâ rtl_test ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tuner
            try:
                result = subprocess.run(['rtl_test', '-t'], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if 'tuner' in line.lower():
                            info_dict['Tuner Type'] = line.strip()
                            break
            except:
                pass
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if info_dict:
                message = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RTL-SDR device:\n"
                for key, value in info_dict.items():
                    message += f"  {key}: {value}\n"
                return True, message
            else:
                return True, "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
                
        except Exception as e:
            return False, f"Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {str(e)}"

class Lab1MainWindow(QMainWindow):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Lab 1"""
    
    def __init__(self):
        super().__init__()
        self.test_thread = None
        self.test_results = []
        self.setup_ui()
        self.setup_touch_interface()
        self.setup_connections()
        self.setWindowTitle("LAB 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö RTL-SDR")
        self.resize(800, 600)
        
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI elements"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á layout ‡∏´‡∏•‡∏±‡∏Å
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πá‡∏ö
        title_label = QLabel("LAB 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö RTL-SDR")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            color: #2c3e50;
            padding: 15px;
            background-color: #ecf0f1;
            border-radius: 8px;
            margin-bottom: 10px;
        """)
        main_layout.addWidget(title_label)
        
        # ‡πÅ‡∏ñ‡∏ß‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
        button_layout1 = QHBoxLayout()
        self.check_device_btn = QPushButton("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
        self.test_function_btn = QPushButton("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        self.check_driver_btn = QPushButton("üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        
        button_layout1.addWidget(self.check_device_btn)
        button_layout1.addWidget(self.test_function_btn)
        button_layout1.addWidget(self.check_driver_btn)
        main_layout.addLayout(button_layout1)
        
        # ‡πÅ‡∏ñ‡∏ß‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        button_layout2 = QHBoxLayout()
        self.run_all_btn = QPushButton("üöÄ ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.clear_btn = QPushButton("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        self.save_btn = QPushButton("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•")
        
        button_layout2.addWidget(self.run_all_btn)
        button_layout2.addWidget(self.clear_btn)
        button_layout2.addWidget(self.save_btn)
        main_layout.addLayout(button_layout2)
        
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.results_text = QTextEdit()
        self.results_text.setReadOnly(True)
        self.results_text.setStyleSheet("""
            QTextEdit {
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                padding: 10px;
                font-family: 'Courier New', monospace;
                font-size: 12px;
                background-color: #2c3e50;
                color: #ecf0f1;
            }
        """)
        main_layout.addWidget(self.results_text, 1)  # ‡πÉ‡∏´‡πâ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #bdc3c7;
                border-radius: 6px;
                text-align: center;
                font-weight: bold;
            }
            QProgressBar::chunk {
                background-color: #27ae60;
                border-radius: 4px;
            }
        """)
        main_layout.addWidget(self.progress_bar)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        self.results_text.append("üéØ LAB 1: RTL-SDR Testing Laboratory")
        self.results_text.append("=" * 50)
        self.results_text.append("üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
        self.results_text.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å '‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
        self.results_text.append("")
        
    def setup_touch_interface(self):
        """‡∏õ‡∏£‡∏±‡∏ö UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™"""
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
        font = QFont()
        font.setPointSize(12)
        self.setFont(font)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™
        button_style = """
            QPushButton {
                border: 2px solid #34495e;
                border-radius: 8px;
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                  stop: 0 #3498db, stop: 1 #2980b9);
                color: white;
                font-weight: bold;
                font-size: 14px;
                padding: 8px;
                min-height: 50px;
                min-width: 120px;
            }
            QPushButton:hover {
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                  stop: 0 #5dade2, stop: 1 #3498db);
            }
            QPushButton:pressed {
                background-color: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                                  stop: 0 #2980b9, stop: 1 #1f4e79);
            }
            QPushButton:disabled {
                background-color: #95a5a6;
                color: #7f8c8d;
            }
        """
        
        for button in self.findChildren(QPushButton):
            button.setStyleSheet(button_style)
            button.setMinimumSize(120, 60)
    
    def setup_connections(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° signals ‡πÅ‡∏•‡∏∞ slots"""
        self.check_device_btn.clicked.connect(self.start_device_check)
        self.test_function_btn.clicked.connect(self.start_functionality_test)
        self.check_driver_btn.clicked.connect(self.start_driver_check)
        self.run_all_btn.clicked.connect(self.run_all_tests)
        self.clear_btn.clicked.connect(self.clear_results)
        self.save_btn.clicked.connect(self.save_results)
    
    def start_device_check(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
        self.start_single_test("device")
    
    def start_functionality_test(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        self.start_single_test("function")
    
    def start_driver_check(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
        self.start_single_test("driver")
    
    def start_single_test(self, test_type):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        if self.test_thread and self.test_thread.isRunning():
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà")
            return
        
        self.set_buttons_enabled(False)
        self.progress_bar.setValue(0)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        self.test_thread = SingleTestThread(test_type)
        self.test_thread.test_result.connect(self.update_test_results)
        self.test_thread.progress_update.connect(self.update_progress)
        self.test_thread.error_occurred.connect(self.handle_test_error)
        self.test_thread.test_completed.connect(self.on_test_completed)
        self.test_thread.start()
    
    def run_all_tests(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if self.test_thread and self.test_thread.isRunning():
            QMessageBox.warning(self, "‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà")
            return
        
        self.set_buttons_enabled(False)
        self.progress_bar.setValue(0)
        self.results_text.append("\n" + "=" * 60)
        self.results_text.append(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î - {datetime.now().strftime('%H:%M:%S')}")
        self.results_text.append("=" * 60)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        self.test_thread = RTLSDRTestThread()
        self.test_thread.test_result.connect(self.update_test_results)
        self.test_thread.progress_update.connect(self.update_progress)
        self.test_thread.error_occurred.connect(self.handle_test_error)
        self.test_thread.test_completed.connect(self.on_test_completed)
        self.test_thread.start()
    
    def update_test_results(self, result_text):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô UI"""
        self.results_text.append(result_text)
        # Auto-scroll ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        scrollbar = self.results_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def update_progress(self, value):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤"""
        self.progress_bar.setValue(value)
    
    def handle_test_error(self, error_message):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö errors ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"""
        self.results_text.append(f"‚ùå Error: {error_message}")
        logger.error(f"Test error: {error_message}")
        self.set_buttons_enabled(True)
    
    def on_test_completed(self, success):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        self.set_buttons_enabled(True)
        
        if success:
            self.results_text.append("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        else:
            self.results_text.append("\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏Ç‡πâ‡∏≠")
        
        # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        QApplication.beep()
    
    def clear_results(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        self.results_text.clear()
        self.progress_bar.setValue(0)
        self.results_text.append("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡πâ‡∏ß - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà")
    
    def save_results(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"rtlsdr_test_results_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("RTL-SDR Test Results\n")
                f.write("=" * 50 + "\n")
                f.write(f"Test Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"System: Raspberry Pi OS\n\n")
                f.write(self.results_text.toPlainText())
            
            self.results_text.append(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {filename}")
            QMessageBox.information(self, "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {filename}")
            
        except Exception as e:
            error_msg = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {str(e)}"
            self.results_text.append(f"\n‚ùå {error_msg}")
            QMessageBox.critical(self, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error_msg)
    
    def set_buttons_enabled(self, enabled):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for button in self.findChildren(QPushButton):
            button.setEnabled(enabled)

class SingleTestThread(QThread):
    """Thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠"""
    
    test_result = pyqtSignal(str)
    progress_update = pyqtSignal(int)
    error_occurred = pyqtSignal(str)
    test_completed = pyqtSignal(bool)
    
    def __init__(self, test_type):
        super().__init__()
        self.test_type = test_type
        
    def run(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° type"""
        try:
            self.progress_update.emit(0)
            main_thread = RTLSDRTestThread()
            
            if self.test_type == "device":
                self.test_result.emit("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ USB...")
                success, message = main_thread.check_usb_device()
                self.test_result.emit(f"{'‚úÖ' if success else '‚ùå'} {message}")
                
            elif self.test_type == "function":
                self.test_result.emit("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á RTL-SDR...")
                success, message = main_thread.test_rtlsdr_functionality()
                self.test_result.emit(f"{'‚úÖ' if success else '‚ùå'} {message}")
                
            elif self.test_type == "driver":
                self.test_result.emit("üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå...")
                success, message = main_thread.check_drivers()
                self.test_result.emit(f"{'‚úÖ' if success else '‚ö†Ô∏è'} {message}")
                
            self.progress_update.emit(100)
            self.test_completed.emit(success)
            
        except Exception as e:
            self.error_occurred.emit(str(e))

def check_system_requirements():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    issues = []
    warnings = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
    if sys.version_info < (3, 7):
        issues.append(f"Python version {sys.version_info.major}.{sys.version_info.minor} ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 3.7+)")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PyQt5
    try:
        from PyQt5.QtCore import QT_VERSION_STR
        logger.info(f"PyQt5 version: {QT_VERSION_STR}")
    except ImportError:
        issues.append("PyQt5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö rtl-sdr packages
    commands_to_check = ['rtl_test', 'rtl_eeprom', 'lsusb']
    for cmd in commands_to_check:
        if not subprocess.run(['which', cmd], capture_output=True).returncode == 0:
            if cmd == 'lsusb':
                warnings.append(f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd} ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
            else:
                issues.append(f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {cmd} ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á rtl-sdr packages")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
    try:
        import os
        user_groups = [g.gr_name for g in os.getgroups()]
        if 'plugdev' not in user_groups:
            warnings.append("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô group plugdev")
    except:
        pass
    
    return len(issues) == 0, issues, warnings

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system requirements ‡∏Å‡πà‡∏≠‡∏ô
    requirements_ok, issues, warnings = check_system_requirements()
    
    if not requirements_ok:
        print("‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö:")
        for issue in issues:
            print(f"  - {issue}")
        if warnings:
            print("‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:")
            for warning in warnings:
                print(f"  - {warning}")
        print("\n‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πá‡∏ö")
        return 1
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á QApplication
    app = QApplication(sys.argv)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ application properties
    app.setApplicationName("DAB+ Lab 1")
    app.setApplicationVersion("1.0")
    app.setOrganizationName("DAB+ Labs")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™
    font = QFont()
    font.setPointSize(11)
    font.setFamily("DejaVu Sans")
    app.setFont(font)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
    logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RTL-SDR Testing Lab")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"PyQt5 version: {QT_VERSION_STR}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á main window
    window = Lab1MainWindow()
    window.show()
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    if warnings:
        window.update_test_results("‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:")
        for warning in warnings:
            window.update_test_results(f"  - {warning}")
        window.update_test_results("")
    
    # ‡∏£‡∏±‡∏ô event loop
    return app.exec_()

# Helper functions
def run_command(command, timeout=10):
    """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á shell ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
    try:
        if isinstance(command, str):
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô list
            command = command.split()
        
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            timeout=timeout,
            check=False
        )
        
        return result.returncode, result.stdout, result.stderr
        
    except subprocess.TimeoutExpired:
        return -1, "", f"Timeout after {timeout} seconds"
    except FileNotFoundError:
        return -1, "", f"Command not found: {command[0] if command else 'unknown'}"
    except Exception as e:
        return -1, "", f"Error: {str(e)}"

def get_rtlsdr_info():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á RTL-SDR device"""
    info = {
        'device_found': False,
        'device_id': None,
        'device_name': None,
        'tuner_type': None,
        'supported_sample_rates': [],
        'supported_gains': []
    }
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö USB device
        returncode, stdout, stderr = run_command(['lsusb'])
        if returncode == 0:
            for line in stdout.split('\n'):
                line_lower = line.lower()
                if '0bda:2832' in line_lower:
                    info['device_found'] = True
                    info['device_id'] = '0bda:2832'
                    info['device_name'] = 'RTL2832U DVB-T'
                    break
                elif '0bda:2838' in line_lower:
                    info['device_found'] = True
                    info['device_id'] = '0bda:2838'
                    info['device_name'] = 'RTL2838 DVB-T'
                    break
                elif 'rtl' in line_lower:
                    info['device_found'] = True
                    info['device_name'] = 'RTL-SDR (Unknown model)'
                    break
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tuner ‡∏à‡∏≤‡∏Å rtl_test
        if info['device_found']:
            returncode, stdout, stderr = run_command(['rtl_test', '-t'], timeout=15)
            if returncode == 0:
                for line in stdout.split('\n'):
                    line_lower = line.lower()
                    if 'tuner' in line_lower:
                        info['tuner_type'] = line.strip()
                    elif 'gain' in line_lower and 'db' in line_lower:
                        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• gain ‡πÉ‡∏ô output
                        pass
        
    except Exception as e:
        logger.error(f"Error getting RTL-SDR info: {str(e)}")
    
    return info

def create_test_report():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    report = []
    report.append("RTL-SDR System Test Report")
    report.append("=" * 40)
    report.append(f"Test Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report.append(f"System: {os.uname().sysname} {os.uname().release}")
    report.append(f"Python: {sys.version.split()[0]}")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    rtlsdr_info = get_rtlsdr_info()
    
    report.append("\nDevice Information:")
    report.append("-" * 20)
    if rtlsdr_info['device_found']:
        report.append(f"Device ID: {rtlsdr_info.get('device_id', 'Unknown')}")
        report.append(f"Device Name: {rtlsdr_info.get('device_name', 'Unknown')}")
        if rtlsdr_info.get('tuner_type'):
            report.append(f"Tuner: {rtlsdr_info['tuner_type']}")
    else:
        report.append("No RTL-SDR device found")
    
    return "\n".join(report)

if __name__ == "__main__":
    sys.exit(main())